#!/bin/bash
set +x

BASEDIR=${BASEDIR:-`cd "$(dirname "$0")"; pwd`}
BUILDER_DIR=`dirname $BASEDIR`
BUILDER=`basename $BUILDER_DIR`
PROJECT_DIR=`dirname $BUILDER_DIR`

# Config file, relative to $PROJECT_DIR
CONFIG_FILE=${CONFIG_FILE:-$BUILDER.conf}

# Change to $PROJECT_DIR and read $CONFIG_FILE
cd "$PROJECT_DIR"
[ -f "$CONFIG_FILE" ] && source "$CONFIG_FILE"

# Default values (configurable in $BUILDER.conf, for example)
BUILD_DIR=${BUILD_DIR:-target}
PUBLISHED_DIR=${PUBLISHED_DIR:-published}
DEFAULT_OP=${DEFAULT_OP:-pdf}
NEEDED_GEMS=${NEEDED_GEMS:-'asciidoctor tilt thread_safe slim'}
BUILDER_PREPARED=${BUILDER_PREPARED:-"$BUILDER.prepared"}
SERVER_PORT=${SERVER_PORT:-8080}
DZSLIDES_BACKEND=${DZSLIDES_BACKEND:-git@github.com:paulojeronimo/asciidoc-dzslides-backend}
DZSLIDES=${DZSLIDES:-git@github.com:paulojeronimo/dzslides}

####################
# Auxiliar functions
####################

adoc_files() {
    if [ "$ADOC_FILES" ]
    then
        echo $ADOC_FILES
    else
        find . -type f -name '*.adoc'
    fi
}

# Install Asciidoctor and necessary dependencies
gem_install_asciidoctor_and_dependencies() {
    local gem
    for gem in $NEEDED_GEMS
    do
        gem list $gem |
        if ! grep -q "$gem "
        then
            if ! gem install $gem
            then
                echo "gem install $gem fails :("
                case "$OSTYPE" in
                    darwin*)
                        echo 'trying to install with sudo ...'
                        # http://stackoverflow.com/a/32892222
                        sudo gem install -n /usr/local/bin $gem
                        ;;
                esac
            fi
        fi
    done
}

# Main function
main() {
    local op=$1

    [ "$op" ] || op=$DEFAULT_OP
    while [ "$op" ]
    do
        shift
        if ! [[ $op == --* ]]
        then
            if ! type _$op &> /dev/null
            then
                echo "Target \"$op\" does'nt exists!"
            else
                _$op "$@"
            fi
        fi
        op=$1
    done
}

install_asciidoc() {
  case $OSTYPE in
    darwin*) brew install asciidoc;;
    *) echo 'Please, install asciidoc!'; exit;;
  esac
}

install_qrencode() {
  case $OSTYPE in
    darwin*) brew install qrencode;;
    *) echo 'Please, install asciidoc!'; exit;;
  esac
}

prepare_dzslides() {
  which asciidoc > /dev/null || install_asciidoc
  which qrencode > /dev/null || install_qrencode
  pushd . &> /dev/null
  mkdir -p ~/.asciidoc && cd $_
  local f=1.0.zip
  if ! [ -f $f ]
  then
      wget -c https://github.com/paulojeronimo/asciidoc-qrencode-filter/archive/$f
      mkdir -p filters && cd $_
      unzip ../$f
      mv asciidoc-qrencode-filter-1.0 qrcode
  fi
  mkdir -p ~/.asciidoc/backends && cd $_
  if ! [ -d dzslides ]
  then
      git clone $DZSLIDES_BACKEND dzslides && cd $_
      git clone $DZSLIDES
  fi
  popd &> /dev/null
}

#########
# Targets
#########

# Prepare the environment to build presentations
_prepare() {
    gem_install_asciidoctor_and_dependencies
    touch "$BUILDER_PREPARED"
}

# Build HTML. Verify if necessary gems and dependencies are installed. If not, install it.
_html() {
    echo 'Generating HTML ...'

    [ -f "$BUILDER_PREPARED" ] || _prepare

    local adoc
    local html
    local destination_dir
    adoc_files | while read adoc
    do
        html=${adoc/adoc/html}
        destination_dir=$PROJECT_DIR/$BUILD_DIR/`dirname "$html"`

        [ ! -f "$html" ] && asciidoctor -D "$destination_dir" "$adoc"
        [ uris.conf -nt "$adoc" ] && touch "$adoc"
        [ "$adoc" -nt "$html" ] && asciidoctor -D "$destination_dir" "$adoc" || true
    done
}

# Build PDF. Verify if necessary gems and dependencies are installed. If not, install it.
_pdf() {
    echo 'Generating PDF ...'

    local use_fopub=false
    while [ "$1" ]
    do
        case "$1" in
            --with-fopub)
                use_fopub=true
                echo 'Using fopub!'
                ;;
            *)
                break
                ;;
        esac
        shift
    done

    [ -f "$BUILDER_PREPARED" ] || _prepare

    local adoc
    local pdf 
    local destination_dir
    adoc_files | while read adoc
    do
        pdf=${adoc/adoc/pdf}
        destination_dir=$PROJECT_DIR/$BUILD_DIR/`dirname "$pdf"`

        if ! $use_fopub
        then
            [ ! -f "$pdf" ] && asciidoctor-pdf -D "$destination_dir" "$adoc"
            [ uris.conf -nt "$adoc" ] && touch "$adoc"
            [ "$adoc" -nt "$pdf" ] && asciidoctor-pdf -D "$destination_dir" "$adoc" || true
        else
            xml=${adoc/adoc/xml}
            destination_dir=$destination_dir/fopub

            asciidoctor -b docbook -d book -a data-uri! -o "$destination_dir"/"$xml" "$adoc"
            fopub="$ASCIIDOCTOR_PROJECTS_DIR"/asciidoctor-fopub/fopub
            case "$OSTYPE" in
                cygwin)
                    fopub=$fopub.bat
                    destination_dir=`cygpath -w "$destination_dir"`
                    chmod +x $fopub
                    ;;
            esac
            $fopub "$destination_dir"/"$xml"
        fi
    done
}

# Remove $BUILD_DIR.
_clean() {
    rm -rf "$BUILD_DIR"
}

# Remove $BUILD_DIR and generated files.
_clean_all() {
    _clean
    rm -rf "$BUILDER_PREPARED"
}

_dzslides() {
  prepare_dzslides

  local embbeded
  local destination_dir=$PROJECT_DIR/$BUILD_DIR
  mkdir -p "$destination_dir"
  if [ "$1" == "--embbeded" ]
  then
    rm -rf "$destination_dir"/*
    embbeded="-a data-uri -a linkcss!"
  else
    rsync -a --update --delete --exclude .git ~/.asciidoc/backends/dzslides/dzslides "$destination_dir"/
    find "$destination_dir" -type d -name .git -delete
  fi
  if [ index.asciidoc -nt "$destination_dir"/index.html ]
  then
    asciidoc $embbeded index.asciidoc && \
    mv index.html "$destination_dir"/
  fi
  [ "$embbeded" ] && true || rsync -a --update --delete images "$destination_dir"/
}

_create_gh_pages_branch() {
  git checkout --orphan gh-pages
  git rm -rf .
  echo "Generated at `date`" > index.html
  git add index.html
  git commit -m 'First commit'
  git checkout master
  git push -u origin gh-pages
  git submodule add -b gh-pages `git config --get remote.origin.url` "$PUBLISHED_DIR"
  git add .
  git commit -m 'gh-pages branch added'
  git push
}

_remove_gh_pages_branch() {
  grep -q gh-pages <(git branch) && git branch -D gh-pages
  git push origin --delete gh-pages
  git submodule deinit -f "$PUBLISHED_DIR"
  git rm -rf "$PUBLISHED_DIR"
  git commit -am 'gh-pages branch removed'
  git push
}

_publish_on_gh_pages() {
  local remote_repo=`git config --get remote.origin.url`
  [ ".$remote_repo" = "." ] && { echo 'The remote repository is not configured!'; return; }

  _publish_with_rsync || return $?

  local msg="Published at `date`"
  cd "$PUBLISHED_DIR"
  git init
  cp "$PROJECT_DIR"/.git/config .git/config
  git add .
  git commit -m "$msg"
  git push --force $remote_repo master:gh-pages
  rm -rf .git
  cd - &> /dev/null
}

_publish_with_rsync() {
  [ -d "$PUBLISHED_DIR" ] || mkdir -p "$PUBLISHED_DIR"

  rsync -av --update --delete "$BUILD_DIR"/ "$PUBLISHED_DIR"/
}

_server() {
  local port=${SERVER_PORT}
  while [ "$1" ] && [[ $1 == --* ]]
  do
    case $1 in
      --port) shift; port=$1
      [[ $port =~ ^[0-9]+$ ]] || { echo 'Invalid port!'; exit 1; }
      ;;
    esac
    shift
  done

  cd "$PROJECT_DIR/$BUILD_DIR" &>/dev/null
  python -m SimpleHTTPServer $port
  cd - &> /dev/null
}

#############
# Start point
#############

main "$@"
